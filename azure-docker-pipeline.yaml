name: build_$(Date:yyyyMMdd)$(Rev:r)

trigger:
- master
- feature/*

pool:
  name: stagingPool

# variables:
#   YOURVARKEYS: YOURVARVALUES
  

stages:

# Continuous Integration Process
- stage: CI
  jobs:
  - job: BuildAndPushDocker
    workspace: 
      clean: all
    steps:
    #- template: templates/DockerPipeline/CI_template.yaml
    
    - task: Docker@2
      inputs:
        containerRegistry: 'DockerHubConnection'
        command: 'login'
    - task: Docker@2
      inputs:
        containerRegistry: 'DockerHubConnection'
        repository: 'odedrafi/bootcampapp'
        command: 'buildAndPush'
        Dockerfile: '$(Build.Repository.LocalPath)/Dockerfile'



# Continuous Deployment Process for Staging Environment
- stage: DeployToStaging
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: staging
    displayName: Deploy to Staging
    environment:
      name: staging
      resourceType: stagingPool
    strategy:
      runOnce:
        deploy:
          steps:
         # - template: templates/DockerPipeline/CD_template.yaml
          - task: Docker@2
            inputs:
              containerRegistry: 'DockerHubConnection'
              command: 'login'

          - script: |
              cat  << EOF > $(Build.Repository.LocalPath)/Docker-Pipeline/vars.yaml
              http_port= $(http_port)
              public_ip= $(public_ip)

              okta_org_url= $(okta_org_url)
              okta_client_id= $(okta_client_id)
              okta_client_secret= $(okta_client_secret)
              registry_password= $(registry_password)
              pg_host= $(pg_host)
              pg_username = $(pg_username)
              pg_database= $(pg_database)
              pg_password= $(pg_password)
              
              EOF
          - script: |
              ansible-playbook -i $(Build.Repository.LocalPath)/StagingInventory.ini $(Build.Repository.LocalPath)/Docker-Pipeline/playbook.yaml --extra-vars "group=Staging"






# Continuous Delivery Process for Production Environment
# - stage: DeployToProduction
#   condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
#   jobs:
#   - deployment: production
#     displayName: Deploy to Production
#     environment:
#       name: production
#       resourceType: VirtualMachine
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - <<YOUR TASKS>>